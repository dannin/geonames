/* 
	database.js for mongojs: https://github.com/gett/mongojs
		Description:
		This module is a wrapper for the mongojs project that allows you to make a single connection to mongodb per database
		and it will intelligently reuse existing connections. Databases will stay open to reduce overhead to additional calls.

		Use case:
		Decreases overhead by reducing database connections to mongodb.
		The way it works is that it stores an array of database connections and only spawns
		a new connection if connecting to a different database. It will reuse an existing connection if only changing the collection.
		This works great in bigger projects that handles users, sessions, posts, etc.
*/

var mongojs = require("mongojs");
var databases = {};

module.exports = {

	use: function(database_name, database_collection, callback) {
		// Callback will return collection, function will return the database object.

		if (!databases[database_name]) { // If database is not in our array.
			var db = mongojs(database_name);
			var collection = db.collection(database_collection);
			databases[database_name] = { name: database_name, db: db };

		} else {  // database already exists in our array
			var db = databases[database_name].db;
			var collection = databases[database_name].db.collection(database_collection); // switch to collection
		}

		if (callback) { callback(collection); }
		return db;
		//return collection; // Return the collection so that the user can use it.
	},

	use_safe: function(database_name, database_collection, callback) {
		// Safe Function will create collection if it doesn't exist.
		if (!databases[database_name]) { // If database is not in our array.
			var db = mongojs(database_name);
			db.createCollection(database_collection, function(err, collection) {
				//if (err) { console.log("[database] Create collection error: " + err); }
				var collection = db.collection(database_collection);
				databases[database_name] = { name: database_name, db: db };
				if (callback) { callback(collection); }
			});

		} else {  // database already exists in our array
			var collection = databases[database_name].db.collection(database_collection); // switch to collection
			if (callback) { callback(collection); }
		}
	},

	db: function(database_name) { // Allow access to the db object itself.
		if (!databases[database_name]) { return false; } // If database is not in our array then exit.
		return databases[database_name].db;
	},

	cleanup: function() {
		// will loop through all database connections and close them.

		for (var i = 0; i < databases.length; i++) {
			if (databases[i].db)  databases[i].db.close();
		}

		//databases = [];
		//mongojs = null;
		databases.length = 0;

		delete databases;
		delete mongojs;

		//databases = null;
		//mongojs = null;
	},

	mongojs: function() {
		return mongojs; // Allow direct access to mongojs for whatever reason.
	},

	shutdown: function() {
		var db = mongojs('admin');
		db.runCommand({shutdown : 1});
		db.close();
	}

}